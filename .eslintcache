[{"C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\index.js":"1","C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\App.js":"2","C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\reportWebVitals.js":"3","C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\Row.jsx":"4","C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\requests.jsx":"5","C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\axios.jsx":"6","C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\Nav.jsx":"7","C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\Banner.jsx":"8"},{"size":500,"mtime":1608193733873,"results":"9","hashOfConfig":"10"},{"size":920,"mtime":1608397716563,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":1765,"mtime":1608409903312,"results":"13","hashOfConfig":"10"},{"size":711,"mtime":1608283034934,"results":"14","hashOfConfig":"10"},{"size":202,"mtime":1608202039908,"results":"15","hashOfConfig":"10"},{"size":841,"mtime":1608410642975,"results":"16","hashOfConfig":"10"},{"size":1484,"mtime":1608374187534,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"i0swrv",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\index.js",[],["36","37"],"C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\App.js",[],"C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\reportWebVitals.js",[],"C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\Row.jsx",["38"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport YouTube from \"react-youtube\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState([]);\r\n\r\n  // load the movies when component mount\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return Request;\r\n    };\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: \"1\",\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\requests.jsx",[],"C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\axios.jsx",[],"C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\Nav.jsx",[],"C:\\Users\\MAC\\Desktop\\React\\netflix-clone\\src\\Banner.jsx",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":4,"column":8,"nodeType":"45","messageId":"46","endLine":4,"endColumn":15},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'Youtube' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]